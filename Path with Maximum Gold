class Solution {
public:
    int dfs(std::vector<std::vector<int>>& grid, int i, int j) {
        int m = grid.size();
        int n = grid[0].size();

        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0) {
            return 0;
        }

        int gold = grid[i][j];
        grid[i][j] = 0; // Mark the cell as visited
        int maxGold = 0;

        maxGold = std::max(maxGold, dfs(grid, i + 1, j));
        maxGold = std::max(maxGold, dfs(grid, i - 1, j));
        maxGold = std::max(maxGold, dfs(grid, i, j + 1));
        maxGold = std::max(maxGold, dfs(grid, i, j - 1));

        grid[i][j] = gold; // Backtrack: restore the cell's gold value
        return maxGold + gold;
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int maxGold = 0;

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] != 0) {
                    maxGold = std::max(maxGold, dfs(grid, i, j));
                }
            }
        }

        return maxGold;
    }
};
