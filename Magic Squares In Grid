class Solution {
public:
    int isMagic(vector<vector<int>> grid, int r, int c) {
        vector<int> nums(10, 0);
        for (int i = r; i < r + 3; i++) {
            for (int j = c; j < c + 3; j++) {
                if (grid[i][j] < 1 || grid[i][j] > 9) {
                    return false;
                }
                nums[grid[i][j]]++;
            }
        }
        for (int i = 1; i <= 9; i++) {
            if (nums[i] != 1) {
                return false;
            }
        }

        // Calculate the magic constant sum
        int sum = grid[r][c] + grid[r][c + 1] + grid[r][c + 2];

        // Check rows
        if (grid[r + 1][c] + grid[r + 1][c + 1] + grid[r + 1][c + 2] != sum)
            return false;
        if (grid[r + 2][c] + grid[r + 2][c + 1] + grid[r + 2][c + 2] != sum)
            return false;

        // Check columns
        if (grid[r][c] + grid[r + 1][c] + grid[r + 2][c] != sum)
            return false;
        if (grid[r][c + 1] + grid[r + 1][c + 1] + grid[r + 2][c + 1] != sum)
            return false;
        if (grid[r][c + 2] + grid[r + 1][c + 2] + grid[r + 2][c + 2] != sum)
            return false;

        // Check diagonals
        if (grid[r][c] + grid[r + 1][c + 1] + grid[r + 2][c + 2] != sum)
            return false;
        if (grid[r][c + 2] + grid[r + 1][c + 1] + grid[r + 2][c] != sum)
            return false;

        return true;
    }
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        int rows = grid.size();
        int cols = grid[0].size();
        int count = 0;

        for (int r = 0; r <= rows - 3; r++) {
            for (int c = 0; c <= cols - 3; c++) {
                if (grid[r + 1][c + 1] == 5 && isMagic(grid, r, c)) {
                    count++;
                }
            }
        }

        return count;
    }
};
