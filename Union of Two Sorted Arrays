class Solution{
    public:
    //arr1,arr2 : the arrays
    // n, m: size of arrays
    //Function to return a list containing the union of the two arrays. 
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        //Your code here
        //return vector with correct order of elements
        
        std::vector<int> unionResult;
        int i = 0, j = 0;
    
        while (i < n && j < m) {
            if (arr1[i] < arr2[j]) {
                if (i == 0 || arr1[i] != arr1[i - 1]) { // Check for duplicates
                    unionResult.push_back(arr1[i]);
                }
                i++;
            } else if (arr1[i] > arr2[j]) {
                if (j == 0 || arr2[j] != arr2[j - 1]) { // Check for duplicates
                    unionResult.push_back(arr2[j]);
                }
                j++;
            } else {
                if ((i == 0 || arr1[i] != arr1[i - 1]) && 
                    (j == 0 || arr2[j] != arr2[j - 1])) { // Check for duplicates
                    unionResult.push_back(arr1[i]);
                }
                i++;
                j++;
            }
        }
    
    // Add remaining elements from arr1
        while (i < n) {
            if (i == 0 || arr1[i] != arr1[i - 1]) { // Check for duplicates
                unionResult.push_back(arr1[i]);
            }
            i++;
        }
    
    // Add remaining elements from arr2
        while (j < m) {
            if (j == 0 || arr2[j] != arr2[j - 1]) { // Check for duplicates
                unionResult.push_back(arr2[j]);
            }
            j++;
        }
    
        return unionResult;
    }
};
