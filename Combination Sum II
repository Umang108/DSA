class Solution{
public:
    void findCombinations(vector<vector<int>>& result, vector<int>& candidates, vector<int>& combination, int target, int start) {
        if (target == 0) {
            result.push_back(combination);
            return;
        }
    
        for (int i = start; i < candidates.size() && candidates[i] <= target; ++i) {
            if (i > start && candidates[i] == candidates[i - 1]) // skip duplicates
                continue;
            combination.push_back(candidates[i]);
            findCombinations(result, candidates, combination, target - candidates[i], i + 1);
            combination.pop_back();
        }
    }
    vector<vector<int>> CombinationSum2(vector<int> arr,int n,int k)
    {
        //code here
            vector<vector<int>> result;
        vector<int> combination;
        sort(arr.begin(), arr.end());
        findCombinations(result, arr, combination, k, 0);
        return result;
    }
};
