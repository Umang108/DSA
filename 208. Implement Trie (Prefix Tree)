class TrieNode{
    public:
        char data;
        TrieNode* children[26];

        bool isterminal;

        TrieNode(char ch){
            data=ch;
            for(int i=0;i<26;i++){
                children[i]=NULL;
            }
            isterminal=false;
        }
};

class Trie {
public:
    TrieNode* root;
    Trie() {
        root=new TrieNode('\0');
    }
    void insertutil(TrieNode* root,string word){
        if(word.length()==0){
            root->isterminal=true;
            return ;
        }
        int index= word[0]-'a';

        TrieNode* child;
        if(root->children[index] !=NULL){
            child=root->children[index];
        }
        else{
            child = new TrieNode(word[0]);
            root->children[index]=child;
        }
        // recurtion

        insertutil(child,word.substr(1));
    }
    void insert(string word) {
        insertutil(root,word);
    }
    bool searchutil(TrieNode* root,string word){
        if(word.length()==0){
            return root->isterminal;
        }

        int index=word[0]-'a';
        TrieNode* child;

        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else
            return false;

        return searchutil(child,word.substr(1));
    }
    bool search(string word) {
        return searchutil(root,word);
    }
    bool prefixutil(TrieNode* root,string word){
        if(word.length()==0){
            return true;
        }

        int index=word[0]-'a';
        TrieNode* child;

        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else
            return false;

        return prefixutil(child,word.substr(1));
    }
    bool startsWith(string prefix) {
        return prefixutil(root,prefix);
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
