class Solution {
public:
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions,
                                    vector<vector<int>>& colConditions) {
        auto topologicalSort =
            [](int k, const vector<vector<int>>& conditions) -> vector<int> {
            vector<int> indegree(k + 1, 0);
            unordered_map<int, vector<int>> graph;
            for (const auto& cond : conditions) {
                graph[cond[0]].push_back(cond[1]);
                ++indegree[cond[1]];
            }

            queue<int> q;
            for (int i = 1; i <= k; ++i) {
                if (indegree[i] == 0) {
                    q.push(i);
                }
            }

            vector<int> order;
            while (!q.empty()) {
                int node = q.front();
                q.pop();
                order.push_back(node);
                for (int neighbor : graph[node]) {
                    if (--indegree[neighbor] == 0) {
                        q.push(neighbor);
                    }
                }
            }

            if (order.size() == k)
                return order;
            return {};
        };

        vector<int> rowOrder = topologicalSort(k, rowConditions);
        vector<int> colOrder = topologicalSort(k, colConditions);

        if (rowOrder.empty() || colOrder.empty())
            return {};

        vector<int> rowIndex(k + 1), colIndex(k + 1);
        for (int i = 0; i < k; ++i) {
            rowIndex[rowOrder[i]] = i;
            colIndex[colOrder[i]] = i;
        }

        vector<vector<int>> matrix(k, vector<int>(k, 0));
        for (int i = 1; i <= k; ++i) {
            matrix[rowIndex[i]][colIndex[i]] = i;
        }

        return matrix;
    }
};
