class Solution {
public:
    void dfs(int node, vector<vector<int>>& reverseGraph, vector<bool>& visited,
             set<int>& ancestors) {
        for (int neighbor : reverseGraph[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                ancestors.insert(neighbor);
                dfs(neighbor, reverseGraph, visited, ancestors);
            }
        }
    }

    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> reverseGraph(n);
        for (const auto& edge : edges) {
            reverseGraph[edge[1]].push_back(edge[0]);
        }

        vector<vector<int>> result(n);

        for (int i = 0; i < n; ++i) {
            set<int> ancestors;
            vector<bool> visited(n, false);
            dfs(i, reverseGraph, visited, ancestors);
            result[i] = vector<int>(ancestors.begin(), ancestors.end());
        }
        return result;
    }
};
