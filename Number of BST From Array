class Solution {
public:
    int catlen(int n) {
        if (n <= 1) return 1;
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += catlen(i) * catlen(n - i - 1);
        }
        return res;
    }

    vector<int> countBSTs(vector<int>& arr) {
        int n = arr.size();
        vector<int> sortedArr = arr;   
        sort(sortedArr.begin(), sortedArr.end());
        unordered_map<int, int> mp;    

        for (int i = 0; i < n; i++) {
            int left = i;
            int right = n - i - 1;
            mp[sortedArr[i]] = catlen(left) * catlen(right);
        }

        vector<int> result;
        for (int val : arr) {
            result.push_back(mp[val]);
        }

        return result;
    }
};
