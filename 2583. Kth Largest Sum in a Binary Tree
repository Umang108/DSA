/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    long long kthLargestLevelSum(TreeNode* root, int k) {
        if (root == NULL) {
            return -1;
        }

        queue<TreeNode*> q;
        q.push(root);
        vector<long long> levelsum;

        while (!q.empty()) {
            int level = q.size();
            long long currlevsum = 0;

            for (int i = 0; i < level; i++) {
                TreeNode* currnode = q.front();
                q.pop();

                currlevsum += currnode->val;
                if (currnode->left)
                    q.push(currnode->left);
                if (currnode->right)
                    q.push(currnode->right);
            }

            levelsum.push_back(currlevsum);
        }
        if (levelsum.size() < k) {
            return -1;
        }
        sort(levelsum.begin(), levelsum.end(), greater<long long>());
        return levelsum[k - 1];
    }
};
