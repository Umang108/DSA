class Solution {
public:
    int compareVersion(string version1, string version2) {
        vector<int> v1, v2;
        size_t i = 0, j = 0;

        // Split version1 by '.' and convert each revision to integer
        while (i < version1.size()) {
            size_t pos = version1.find('.', i);
            if (pos == string::npos)
                pos = version1.size();
            v1.push_back(stoi(version1.substr(i, pos - i)));
            i = pos + 1;
        }

        // Split version2 by '.' and convert each revision to integer
        while (j < version2.size()) {
            size_t pos = version2.find('.', j);
            if (pos == string::npos)
                pos = version2.size();
            v2.push_back(stoi(version2.substr(j, pos - j)));
            j = pos + 1;
        }

        // Compare revisions
        for (size_t k = 0; k < max(v1.size(), v2.size()); ++k) {
            int r1 = (k < v1.size()) ? v1[k] : 0;
            int r2 = (k < v2.size()) ? v2[k] : 0;
            if (r1 < r2)
                return -1;
            if (r1 > r2)
                return 1;
        }

        return 0;
    }
};
