/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildBalancedBST(const std::vector<int>& nodes, int start,
                               int end) {
        if (start > end)
            return nullptr;

        int mid = start + (end - start) / 2; // Find the middle element
        TreeNode* root = new TreeNode(nodes[mid]);

        root->left = buildBalancedBST(nodes, start, mid - 1);
        root->right = buildBalancedBST(nodes, mid + 1, end);

        return root;
    }

    void inorderTraversal(TreeNode* root, std::vector<int>& nodes) {
        if (!root)
            return;
        inorderTraversal(root->left, nodes);
        nodes.push_back(root->val);
        inorderTraversal(root->right, nodes);
    }
    TreeNode* balanceBST(TreeNode* root) {
        std::vector<int> nodes;
        inorderTraversal(root, nodes); // Collect node values in sorted order
        return buildBalancedBST(nodes, 0, nodes.size() - 1);
    }
    void printLevelOrder(TreeNode* root) {
        if (!root)
            return;
        std::queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            if (node) {
                std::cout << node->val << " ";
                q.push(node->left);
                q.push(node->right);
            } else {
                std::cout << "null ";
            }
        }
    }
};
