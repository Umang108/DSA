class Solution {
  public:
  const int INF = 1e9 + 5;
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Code here
            const int INF = 1e9 + 5; 
        vector<vector<pair<int, int>>> adj(n + 1);
    
        
        for (int i = 0; i < m; ++i) {
            int a = edges[i][0];
            int b = edges[i][1];
            int w = edges[i][2];
            adj[a].push_back({b, w});
            adj[b].push_back({a, w});
        }
    
        
        vector<int> dist(n + 1, INF); 
        vector<int> parent(n + 1, -1); 
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        dist[1] = 0; 
        pq.push({0, 1}); 
    
        while (!pq.empty()) {
            int d = pq.top().first;
            int u = pq.top().second;
            pq.pop();
    
            if (d > dist[u]) continue;
    
            for (auto edge : adj[u]) {
                int v = edge.first;
                int w = edge.second;
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    parent[v] = u;
                    pq.push({dist[v], v});
                }
            }
        }
    
        
        if (dist[n] == INF) return {-1};
    
        
        vector<int> path;
        for (int v = n; v != -1; v = parent[v]) {
            path.push_back(v);
        }
        reverse(path.begin(), path.end());
        path.insert(path.begin(), dist[n]);
        
        return path;
    }
};
