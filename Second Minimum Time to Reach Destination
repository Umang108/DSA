class Solution {
public:
    struct State {
        int node;
        int time;
        bool operator>(const State &other) const {
            return time > other.time;
        }
    };
    int secondMinimum(int n, vector<vector<int>>& edges, int time, int change) {
        vector<vector<int>> graph(n + 1);
        for (const auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }

        priority_queue<State, vector<State>, greater<State>> pq;
        pq.push({1, 0});

        vector<int> first(n + 1, INT_MAX);
        vector<int> second(n + 1, INT_MAX);
        first[1] = 0;

        while (!pq.empty()) {
            auto [node, curr_time] = pq.top();
            pq.pop();

            for (int neighbor : graph[node]) {
                int wait_time = 0;
                if ((curr_time / change) % 2 == 1) { // Currently red signal
                    wait_time = change - (curr_time % change);
                }
                int new_time = curr_time + time + wait_time;

                if (new_time < first[neighbor]) {
                    second[neighbor] = first[neighbor];
                    first[neighbor] = new_time;
                    pq.push({neighbor, new_time});
                } else if (new_time > first[neighbor] &&
                           new_time < second[neighbor]) {
                    second[neighbor] = new_time;
                    pq.push({neighbor, new_time});
                }
            }
        }

        return second[n];
    }
};
