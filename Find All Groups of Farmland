class Solution {
private:
    std::vector<int> dfs(std::vector<std::vector<int>>& land, int i, int j) {
        int m = land.size();
        int n = land[0].size();

        // Initialize group boundaries
        int r1 = i, c1 = j, r2 = i, c2 = j;

        // Mark current cell as visited
        land[i][j] = 0;

        // Explore four directions
        if (i + 1 < m && land[i + 1][j] == 1) {
            r2 = std::max(r2, dfs(land, i + 1, j)[2]);
        }
        if (j + 1 < n && land[i][j + 1] == 1) {
            c2 = std::max(c2, dfs(land, i, j + 1)[3]);
        }

        return {r1, c1, r2, c2};
    }

public:
    vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        std::vector<std::vector<int>> groups;
        int m = land.size();
        int n = land[0].size();

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] == 1) {
                    std::vector<int> group = dfs(land, i, j);
                    groups.push_back(group);
                }
            }
        }

        return groups;
    }
};
