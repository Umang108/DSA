class Solution {
public:
    class UnionFind {
    public:
        vector<int> parent, rank;

        UnionFind(int n) {
            parent.resize(n + 1);
            rank.resize(n + 1, 0);
            iota(parent.begin(), parent.end(), 0); // Initializes parent[i] = i
        }

        int find(int u) {
            if (parent[u] != u) {
                parent[u] = find(parent[u]); // Path compression
            }
            return parent[u];
        }

        bool unite(int u, int v) {
            int pu = find(u);
            int pv = find(v);
            if (pu == pv)
                return false; // They are already connected
            if (rank[pu] < rank[pv]) {
                parent[pu] = pv;
            } else if (rank[pu] > rank[pv]) {
                parent[pv] = pu;
            } else {
                parent[pv] = pu;
                rank[pu]++;
            }
            return true;
        }
    };

    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        UnionFind ufAlice(n), ufBob(n);
        int usedEdges = 0;

        for (const auto& edge : edges) {
            if (edge[0] == 3) {
                if (ufAlice.unite(edge[1], edge[2])) {
                    ufBob.unite(edge[1], edge[2]);
                    usedEdges++;
                }
            }
        }
        for (const auto& edge : edges) {
            if (edge[0] == 1) {
                if (ufAlice.unite(edge[1], edge[2])) {
                    usedEdges++;
                }
            }
        }
        for (const auto& edge : edges) {
            if (edge[0] == 2) {
                if (ufBob.unite(edge[1], edge[2])) {
                    usedEdges++;
                }
            }
        }

        int rootAlice = ufAlice.find(1);
        int rootBob = ufBob.find(1);
        for (int i = 2; i <= n; ++i) {
            if (ufAlice.find(i) != rootAlice || ufBob.find(i) != rootBob) {
                return -1;
            }
        }

        return edges.size() - usedEdges;
    }
};
