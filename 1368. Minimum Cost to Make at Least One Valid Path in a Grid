class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        vector<vector<int>> dist(m, vector<int>(n, INT_MAX));
        dist[0][0] = 0; 

        deque<pair<int, int>> dq; 
        dq.push_front({0, 0});

        while (!dq.empty()) {
            auto [x, y] = dq.front();
            dq.pop_front();
            for (int dir = 1; dir <= 4; ++dir) {
                int nx = x + directions[dir - 1].first;
                int ny = y + directions[dir - 1].second;
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int newCost = dist[x][y] + (grid[x][y] == dir ? 0 : 1);
                    if (newCost < dist[nx][ny]) {
                        dist[nx][ny] = newCost;
                        if (grid[x][y] == dir) {
                            dq.push_front({nx, ny}); 
                        } else {
                            dq.push_back({nx, ny}); 
                        }
                    }
                }
            }
        }

        return dist[m - 1][n - 1];
    }
};
