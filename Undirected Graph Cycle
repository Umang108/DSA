class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    
    bool dfs(int node,int parent,vector<bool>& visited,vector<int> adj[]){
        visited[node]=true;
        for(int neighbour : adj[node]){
            if(!visited[neighbour]){
                if(dfs(neighbour, node, visited,adj )){
                    return true;
                }
            }
            else if(neighbour !=parent){
                return true;
            }
        }
        return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<bool>visited(V,false);
        
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(dfs(i,-1,visited,adj)){
                    return true;
                }
            }
        }
        return false;
        
    }
};
